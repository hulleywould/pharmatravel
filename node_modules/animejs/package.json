{
  "_args": [
    [
      {
        "raw": "animejs@^2.2.0",
        "scope": null,
        "escapedName": "animejs",
        "name": "animejs",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "/home/hulleywould/Desktop/pharmatravel"
    ]
  ],
  "_from": "animejs@>=2.2.0 <3.0.0",
  "_id": "animejs@2.2.0",
  "_inCache": true,
  "_location": "/animejs",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/animejs-2.2.0.tgz_1506359444369_0.5265960388351232"
  },
  "_npmUser": {
    "name": "juliangarnier",
    "email": "hello@julian.gr"
  },
  "_npmVersion": "4.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "animejs@^2.2.0",
    "scope": null,
    "escapedName": "animejs",
    "name": "animejs",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/animejs/-/animejs-2.2.0.tgz",
  "_shasum": "35eefdfc535b81949c9cb06f0b3e60c02e6fdc80",
  "_shrinkwrap": null,
  "_spec": "animejs@^2.2.0",
  "_where": "/home/hulleywould/Desktop/pharmatravel",
  "author": {
    "name": "Julian Garnier",
    "email": "hello@julian.gr"
  },
  "bugs": {
    "url": "https://github.com/juliangarnier/anime/issues"
  },
  "dependencies": {},
  "description": "JavaScript animation engine",
  "devDependencies": {
    "google-closure-compiler-js": "^20170124.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "35eefdfc535b81949c9cb06f0b3e60c02e6fdc80",
    "tarball": "https://registry.npmjs.org/animejs/-/animejs-2.2.0.tgz"
  },
  "files": [
    "anime.js",
    "anime.min.js"
  ],
  "gitHead": "ae9eb90ab66e92f89dad8f9b59e9df3928c16991",
  "homepage": "http://animejs.com",
  "keywords": [
    "anime",
    "animation",
    "javascript",
    "CSS",
    "transforms",
    "SVG",
    "canvas"
  ],
  "license": "MIT",
  "main": "anime.min.js",
  "maintainers": [
    {
      "name": "juliangarnier",
      "email": "hello@julian.gr"
    }
  ],
  "name": "animejs",
  "optionalDependencies": {},
  "readme": "# [anime.js](http://animejs.com) ![](http://img.badgesize.io/juliangarnier/anime/v2.0/anime.min.js.svg?style=flat&color=18FF92)\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/animejs-logo.gif\" width=\"100%\" />\n\n>*Anime* `(/ˈæn.ə.meɪ/)` is a lightweight JavaScript animation library. It works with any CSS Properties, individual CSS transforms, SVG or any DOM attributes, and JavaScript Objects.\n\n⚠️ **Migrating from v1.x ? Make sure to read the [changelog](https://github.com/juliangarnier/anime/releases/tag/v2.0.0)** ⚠️\n\n### Main features\n\n* [Keyframes](#keyframes): Chain multiple animation properties.\n* [Timeline](#timeline): Synchronize multiple instances together.\n* [Playback controls](#playback-controls): Play, pause, restart, seek animations or timelines.\n* [CSS transforms](#individual-CSS-transforms): Animate CSS transforms individually.\n* [Function based values](#function-based-values): Multiple animated targets can have individual value.\n* [SVG Animations](#svg): Motion path, line drawing and morphing animations.\n* [Easing functions](#easing-functions): Use the built in functions or create your own Cubic Bézier curve easing.\n\n### Demos and examples\n\n* [CodePen demos and examples](http://codepen.io/collection/b392d3a52d6abf5b8d9fda4e4cab61ab/)\n* [juliangarnier.com](http://juliangarnier.com)\n* [animejs.com](http://animejs.com)\n* [kenzo.com/en/thejunglebook](https://kenzo.com/en/thejunglebook)\n* [Stress test](http://codepen.io/juliangarnier/pen/9aea7f045d7db301eab41bc09dcfc04d?editors=0010)\n\n### Browser support\n\n| Chrome | Safari | IE / Edge | Firefox | Opera |\n| --- | --- | --- | --- | --- |\n| 24+ | 6+ | 10+ | 32+ | 15+ |\n\n## Usage\n\n```bash\n$ npm install animejs\n# OR\n$ bower install animejs\n```\n\n```javascript\nimport anime from 'animejs'\n```\n\nOr manually [download](https://github.com/juliangarnier/anime/archive/master.zip) and link `anime.min.js` in your HTML:\n\n```html\n<script src=\"anime.min.js\"></script>\n```\n\nThen start animating:\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: [\n    { value: 100, duration: 1200 },\n    { value: 0, duration: 800 }\n  ],\n  rotate: '1turn',\n  backgroundColor: '#FFF',\n  duration: 2000,\n  loop: true\n});\n```\n\n# API\n\n## Targets\n\nThe `targets` property defines the elements or JS `Object`s to animate.\n\n| Types | Examples\n| --- | ---\n| CSS Selectors | `'div'`, `'.item'`, `'path'`, `'#el path'` ...\n| DOM Element | `document.querySelector('.item')`\n| NodeList | `document.querySelectorAll('.item')`\n| `Object` | `{prop1: 100, prop2: 200}`\n| `Array` | `['div', '.item', domNode]`\n\n➜ [Targets examples](http://animejs.com/documentation/#cssSelector)\n\n## Animatable properties\n\n| Types | Examples\n| --- | ---\n| CSS | `opacity`, `backgroundColor`, `fontSize` ...\n| Transforms | `translateX`, `rotate`, `scale` ...\n| Object properties | Any `Object` property containing numerical values\n| DOM attributes | Any DOM attributes containing numerical values\n| SVG attributes | Any SVG attributes containing numerical values\n\n➜ [Animatable properties examples](http://animejs.com/documentation/#cssProperties)\n\n### CSS\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/prop-css.gif\" width=\"332\" />\n\nAny CSS properties can be animated:\n\n```javascript\nanime({\n  targets: 'div',\n  left: '80%', // Animate all divs left position to 80%\n  opacity: .8, // Animate all divs opacity to .8\n  backgroundColor: '#FFF' // Animate all divs background color to #FFF\n});\n```\n\n➜ [CSS properties example](http://animejs.com/documentation/#cssProperties)\n\n### Individual CSS transforms\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/prop-transforms.gif\" width=\"332\" />\n\nCSS transforms can be animated individually:\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 250, // Animate all divs translateX property to 250px\n  scale: 2, // Animate all divs scale to 2\n  rotate: '1turn' // Animate all divs rotation to 1 turn\n});\n```\n\n➜ [CSS Transforms example](http://animejs.com/documentation/#CSStransforms)\n\n### JavaScript Object properties\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/prop-js-obj.gif\" width=\"332\" />\n\nAny `Object` property containing a numerical value can be animated:\n\n```javascript\nvar myObject = {\n  prop1: 0,\n  prop2: '0%'\n}\n\nanime({\n  targets: myObject,\n  prop1: 50, // Animate the 'prop1' property from myObject to 50\n  prop2: '100%' // Animate the 'prop2' property from myObject to 100%\n});\n```\n\n➜ [Object properties example](http://animejs.com/documentation/#JSobjectProp)\n\n### DOM Attributes\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/prop-dom-attr.gif\" width=\"332\" />\n\nAny DOM Attribute containing a numerical values can be animated:\n\n```html\n<input value=\"0\">\n```\n\n```javascript\nanime({\n  targets: input,\n  value: 1000 // Animate the input value to 1000\n  round: 1 // Remove decimals by rounding the value\n});\n```\n\n➜ [DOM Attributes example](http://animejs.com/documentation/#domAttributes)\n\n### SVG Attributes\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/prop-svg-attr.gif\" width=\"332\" />\n\nAny SVG Attribute containing a numerical values can be animated:\n\n```html\n<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\">\n  <polygon points=\"64 68.73508918222262 8.574 99.9935923731656 63.35810017508558 67.62284396863708 64 3.993592373165592 64.64189982491442 67.62284396863708 119.426 99.9935923731656\"></polygon>\n</svg>\n```\n\n```javascript\nanime({\n  targets: 'polygon',\n  points: '64 128 8.574 96 8.574 32 64 0 119.426 32 119.426 96'\n});\n```\n\n➜ [SVG Attributes example](http://animejs.com/documentation/#svgAttributes)\n\n## Property parameters\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/prop-parameters.gif\" width=\"332\" />\n\nDefines duration, delay and easing for each property animations.<br>\nCan be set globally, or individually to each properties:\n\n| Names | Defaults | Types | Info\n| --- | --- | --- | ---\n| duration | `1000` | `number`, `function`  | millisecond\n| delay | `0` | `number`, `function`   | millisecond\n| easing | `'easeOutElastic'` | `function`  | [See Easing functions](#easing-functions)\n| elasticity | `500` | `number`, `function` | Range [0 - 1000]\n| round | `false` | `number`, `boolean`, `function` | Power of 10\n\n```javascript\nanime({\n  translateX: {\n    value: 250,\n    duration: 800\n  },\n  rotate: {\n    value: 360,\n    duration: 1800,\n    easing: 'easeInOutSine'\n  },\n  scale: {\n    value: 2,\n    duration: 1600,\n    delay: 800,\n    easing: 'easeInOutQuart'\n  },\n  delay: 250 // All properties except 'scale' inherit 250ms delay\n});\n```\n\n➜ [Property parameters examples](http://animejs.com/documentation/#duration)\n\n## Function based property parameters\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/fb-parameters.gif\" width=\"332\" />\n\nGet different property parameters for every target of the animation.<br>\nThe function accepts 3 arguments: `target`, `index`, `targetsLength`.\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 250,\n  rotate: 180,\n  duration: function(target) {\n    // Duration based on every div 'data-duration' attribute\n    return target.getAttribute('data-duration');\n  },\n  delay: function(target, index) {\n    // 100ms delay multiplied by every div index, in ascending order\n    return index * 100;\n  },\n  elasticity: function(target, index, totalTargets) {\n    // Elasticity multiplied by every div index, in descending order\n    return 200 + ((totalTargets - index) * 200);\n  }\n});\n```\n\n➜ [Function based parameters examples](http://animejs.com/documentation/#functionBasedDuration)\n\n## Animation parameters\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/anim-parameters.gif\" width=\"332\" />\n\nParameters relative to the animation to specify the direction, the number of loops or autoplay.\n\n| Names | Defaults | Types\n| --- | --- | ---\n| loop | `false` | `number`, `boolean`\n| direction | `'normal'` | `'normal'`, `'reverse'`, `'alternate'`\n| autoplay | `true` | `boolean`\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 100,\n  duration: 2000,\n  loop: 3, // Play the animation 3 times\n  direction: 'reverse', // Play the animation in reverse\n  autoplay: false // Animation paused by default\n});\n```\n\n➜ [Animation parameters examples](http://animejs.com/documentation/#alternate)\n\n## Property values\n\n### Single value\n\nDefines the end value of the animation.<br>\nStart value is the original target value, or default transforms value.\n\n| Types | Examples | Infos\n| --- | --- | ---\n| Number | `100` | Automatically add original or default unit if needed\n| String | `'10em'`, `'1turn'`, `'M21 1v160'`, `'50%'` | Must contains at least one numerical value\n| Relative values | `'+=100px'`, `'-=20em'`, `'*=4'` | Add, subtract or multiply the original property value\n| Colors | `'#FFF'`, `'rgb(255,0,0)'`, `'hsl(100, 20%, 80%)'` | Accepts 3 or 6 hex digit, rgb, or hsl values\n\n➜ [Values examples](http://animejs.com/documentation/#unitlessValue)\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 100, // Add 'px' by default (from 0px to 100px)\n  rotate: '1turn', // Use 'turn' as unit (from 0turn to 1turn)\n  scale: '*=2', // Multiply the current scale value by 2 (from 1 to (1 * 2))\n  backgroundColor: '#FFF', // Animate the background color to #FFF (from 'rgb(0,0,0)' to 'rgb(255,255,255)')\n  duration: 1500\n});\n```\n\n### From > To values\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/value-from-to.gif\" width=\"332\" />\n\nForce the animation to start at a certain value.\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: [100, 200], // Translate X from 100 to 200\n  rotate: ['.5turn', '1turn'], // Rotate from 180deg to 360deg\n  scale: ['*=2', 1], // Scale from 2 times the original value to 1,\n  backgroundColor: ['rgb(255,0,0)', '#FFF'], // Will transition the background color from red to white\n  duration: 1500\n});\n```\n\n➜ [Specific initial value example](http://animejs.com/documentation/#specificInitialValue)\n\n### Function based values\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/value-fb.gif\" width=\"332\" />\n\nSame as [function based property parameters](#function-based-property-parameters).<br>\nGet different values for every target and property of the animation.<br>\nThe function accepts 3 arguments: `target`, `index`, `targetsLength`.\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: function(el) {\n    return el.getAttribute('data-x');\n  },\n  translateY: function(el, i) {\n    return 50 + (-50 * i);\n  },\n  scale: function(el, i, l) {\n    return (l - i) + .25;\n  },\n  rotate: function() { return anime.random(-360, 360); },\n  duration: function() { return anime.random(800, 1600); },\n  delay: function() { return anime.random(0, 1000); }\n});\n```\n\n➜ [Function based value example](http://animejs.com/documentation/#functionBasedPropVal)\n\n### Keyframes\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/value-keyframes.gif\" width=\"332\" />\n\nKeyframes are defined using an `Array` of property Object.<br>\nInstance's `duration` is divided by the number of keyframes of each properties if not specified.\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: [\n    { value: 250, duration: 1000, delay: 500, elasticity: 0 },\n    { value: 0, duration: 1000, delay: 500, elasticity: 0 }\n  ],\n  translateY: [\n    { value: -40, duration: 500, elasticity: 100 },\n    { value: 40, duration: 500, delay: 1000, elasticity: 100 },\n    { value: 0, duration: 500, delay: 1000, elasticity: 100 }\n  ],\n  scaleX: [\n    { value: 4, duration: 100, delay: 500, easing: 'easeOutExpo' },\n    { value: 1, duration: 900, elasticity: 300 },\n    { value: 4, duration: 100, delay: 500, easing: 'easeOutExpo' },\n    { value: 1, duration: 900, elasticity: 300 }\n  ],\n  scaleY: [\n    { value: [1.75, 1], duration: 500 },\n    { value: 2, duration: 50, delay: 1000, easing: 'easeOutExpo' },\n    { value: 1, duration: 450 },\n    { value: 1.75, duration: 50, delay: 1000, easing: 'easeOutExpo' },\n    { value: 1, duration: 450 }\n  ]\n});\n```\n\n➜ [Specific keyframes properties example](http://animejs.com/documentation/#keyframes)\n\n## Timeline\n\n### Basic timeline\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/timeline.gif\" width=\"332\" />\n\nPlay animations in sequence by creating a timeline:\n\n```javascript\nvar myTimeline = anime.timeline();\n```\n\nA timeline accepts the same parameters as an animation: `direction`, `loop` and `autoplay`.\n\n```javascript\nvar myTimeline = anime.timeline({\n  direction: 'alternate',\n  loop: 3,\n  autoplay: false\n});\n```\n\nAdd animations to the timeline with `.add()` :\n\n```javascript\nmyTimeline\n  .add({\n    targets: '.square',\n    translateX: 250\n  })\n  .add({\n    targets: '.circle',\n    translateX: 250\n  })\n  .add({\n    targets: '.triangle',\n    translateX: 250\n  });\n```\n\nAccess timeline children animations with `myTimeline.children`\n\n➜ [Basic timeline example](http://animejs.com/documentation/#basicTimeline)\n\n### Timeline animations offsets\n\n`offset` defines the starting time of an animation on the timeline.\n\n#### Relative offset\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/timeline-relative.gif\" width=\"332\" />\n\nDefines starting time relative to the previous animations duration.\n\n| Types | Examples | Infos\n| --- | --- | ---\n| `+=` | `'+=100'` | Starts 100ms after the previous animation ends\n| `-=` | `'-=100'` | Starts 100ms before the previous animation ends\n| `*=` | `'*=2'` | Starts at 2 times the previous animations duration\n\n```javascript\nmyTimeline\n  .add({\n    targets: '.square',\n    translateX: 250\n  })\n  .add({\n    targets: '.circle',\n    translateX: 250,\n    offset: '-=600' // Starts 600ms before the previous animation ends\n  })\n  .add({\n    targets: '.triangle',\n    translateX: 250,\n    offset: '-=800' // Starts 800ms before the previous animation ends\n  });\n```\n\n➜ [Relative offset example](http://animejs.com/documentation/#relativeOffset)\n\n#### Absolute offset\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/timeline-absolute.gif\" width=\"332\" />\n\nDefines an absolute starting time on the timeline with a number.\n\n```javascript\nmyTimeline\n  .add({\n    targets: '.square',\n    translateX: 250,\n    offset: 1000 // Starts at 1000ms\n  })\n  .add({\n    targets: '.circle',\n    translateX: 250,\n    offset: 500 // Starts at 500ms\n  })\n  .add({\n    targets: '.triangle',\n    translateX: 250,\n    offset: 0 // Starts at 0ms\n  });\n```\n\n➜ [Absolute offset example](http://animejs.com/documentation/absoluteOffset)\n\n## Playback controls\n\nPlay, pause, restart, seek animations or timelines.\n\n### Play / Pause\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/playback-play-pause.gif\" width=\"332\" />\n\n```javascript\nvar playPauseAnim = anime({\n  targets: 'div',\n  translateX: 250,\n  direction: 'alternate',\n  loop: true,\n  autoplay: false // prevent the instance from playing\n});\n\nplayPauseAnim.play(); //  Manually play\nplayPauseAnim.pause(); //  Manually pause\n```\n\n➜ [Play / Pause example](http://animejs.com/documentation/#playPause)\n\n### Restart\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/playback-restart.gif\" width=\"332\" />\n\n```javascript\nvar restartAnim = anime({\n  targets: 'div',\n  translateX: 250,\n  direction: 'alternate',\n  loop: true,\n  autoplay: false\n});\n\nrestartAnim.restart(); // Restart the animation and reset the loop count / current direction\n```\n\n➜ [Restart example](http://animejs.com/documentation/#restartAnim)\n\n### Reverse\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/playback-reverse.gif\" width=\"332\" />\n\n```javascript\nvar reverseAnim = anime({\n  targets: 'div',\n  translateX: 250,\n  direction: 'alternate',\n  loop: true\n});\n\nreverseAnim.reverse(); // Change the animation direction\n```\n\n➜ [Reverse example](http://animejs.com/documentation/#reverseAnim)\n\n### Seek\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/playback-seek.gif\" width=\"332\" />\n\nChange animations or timelines current time.\n\n```javascript\nvar seekAnim = anime({\n  targets: 'div',\n  translateX: 250,\n  delay: function(el, i, l) { return i * 100; },\n  elasticity: 200,\n  autoplay: false\n});\n\nseekAnim.seek(500); // Set the animation current time to 500ms\n```\n\n➜ [Seek example](http://animejs.com/documentation/#seekAnim)\n\n## Callbacks\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/callbacks-all.gif\" width=\"332\" />\n\nExecute a function at the beginning, during or when an animation or timeline is completed.\n\n| Names | Types | Arguments | Info\n| --- | --- | --- | ---\n| update | `function`| animation `Object` | Called at time = 0\n| begin | `function` | animation `Object` | Called after animation delay is over\n| complete | `function` | animation `Object` | Called only after all the loops are completed\n\n➜ [Callbacks examples](http://animejs.com/documentation/#allCallbacks)\n\n### Update\n\n`update()` is called on every frame while the instance is playing.\n\n```javascript\nvar myAnimation = anime({\n  targets: '#update .el',\n  translateX: 250,\n  delay: 1000,\n  update: function(anim) {\n    console.log(anim.currentTime + 'ms'); // Get current animation time with `myAnimation.currentTime`, return value in ms.\n    console.log(anim.progress + '%'); // Get current animation progress with `myAnimation.progress`, return value in %\n  }\n});\n```\n\n➜ [Update example](http://animejs.com/documentation/#update)\n\n### Begin\n\n`begin()` is called once after the delay is finished.\n\n```javascript\nvar myAnimation = anime({\n  targets: '#begin .el',\n  translateX: 250,\n  delay: 1000,\n  begin: function(anim) {\n    console.log(anim.began); // true after 1000ms\n  }\n});\n```\n\nCheck if the animation has begun with `myAnimation.began`, return `true` or `false`.\n\n➜ [Begin example](http://animejs.com/documentation/#begin)\n\n### Run\n\n`run()` is called every frame after the delay is finished.\n\n```javascript\nvar myAnimation = anime({\n  targets: '#run .el',\n  translateX: 250,\n  delay: 1000,\n  run: function(anim) {\n    console.log(anim.currentTime);\n  }\n});\n```\n\n➜ [Run example](http://animejs.com/documentation/#run)\n\n### Complete\n\n`complete()` is called once after the animation is finished.\n\n```javascript\nvar myAnimation = anime({\n  targets: '#complete .el',\n  translateX: 250,\n  complete: function(anim) {\n    console.log(anim.completed);\n  }\n});\n```\n\nCheck if the animation has finished with `myAnimation.completed`, return `true` or `false`.\n\n➜ [Complete example](http://animejs.com/documentation/#complete)\n\n## Promises\n\n`myAnimation.finished` returns a Promise object which will resolve once the animation has finished running.\n\n➜ [Promises example](http://animejs.com/documentation/#finishedPromise)\n\n## SVG\n\n### Motion path\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/svg-motion-path.gif\" width=\"332\" />\n\nTranslate and rotate DOM elements along an SVG path:\n\n```javascript\n// Create a path `Object`\nvar path = anime.path('#motionPath path');\n\nvar motionPath = anime({\n  targets: '#motionPath .el',\n  translateX: path('x'), // Follow the x values from the path `Object`\n  translateY: path('y'), // Follow the y values from the path `Object`\n  rotate: path('angle')  // Follow the angle values from the path `Object`\n});\n```\n\n➜ [Motion path example](http://animejs.com/documentation/#motionPath)\n\n### Morphing\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/svg-morphing.gif\" width=\"332\" />\n\nAnimate the transition between two SVG shapes:\n\n```html\n<svg class=\"shape\" width=\"128\" height=\"128\" viewBox=\"0 0 128 128\">\n  <polygon points=\"64 68.64 8.574 100 63.446 67.68 64 4 64.554 67.68 119.426 100\"></polygon>\n</svg>\n```\n\n```javascript\nvar svgAttributes = anime({\n  targets: '.shape polygon',\n  points: '64 128 8.574 96 8.574 32 64 0 119.426 32 119.426 96'\n});\n```\n\nShapes need to have the same number of points.\n\n➜ [Morphing example](http://animejs.com/documentation/#morphing)\n\n### Line drawing\n\n<img src=\"http://animejs.com/documentation/assets/img/readme/svg-line-drawing.gif\" width=\"332\" />\n\nLine drawing animation of an SVG shape:\n\n```javascript\nanime({\n  targets: '.shape path',\n  strokeDashoffset: [anime.setDashoffset, 0]\n});\n```\n\n➜ [Line drawing example](http://animejs.com/documentation/#lineDrawing)\n\n## Easing functions\n\nThe `easing` parameter can accept either a string or a custom Bézier curve coordinates (array).\n\n| Types | Examples | Infos\n| --- | --- | ---\n| String | `'easeOutExpo'` | Built in function names\n| `Array` | [.91,-0.54,.29,1.56] | Custom Bézier curve coordinates ([x1, y1, x2, y2])\n\n### Built in functions\n\nLinear easing: `'linear'`\n\nPenner's equations:\n\n| easeIn | easeOut | easeInOut\n| --- | --- | ---\n| easeInQuad | easeOutQuad | easeInOutQuad |\n| easeInCubic | easeOutCubic | easeInOutCubic\n| easeInQuart | easeOutQuart | easeInOutQuart\n| easeInQuint | easeOutQuint | easeInOutQuint\n| easeInSine | easeOutSine | easeInOutSine\n| easeInExpo | easeOutExpo | easeInOutExpo\n| easeInCirc | easeOutCirc | easeInOutCirc\n| easeInBack | easeOutBack | easeInOutBack\n| easeInElastic | easeOutElastic | easeInOutElastic\n\n➜ [Built in easing functions examples](http://animejs.com/documentation/#penner)\n\nUsage:\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 100,\n  easing: 'easeOutExpo' // Default 'easeOutElastic'\n});\n```\n\nElasticity of Elastic easings can be configured with the `elasticity` parameters:\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 100,\n  easing: 'easeOutElastic',\n  elasticity: 600 // Default 500, range [0-1000]\n});\n```\n\n➜ [Elasticity examples](http://animejs.com/documentation/#elasticity)\n\n### Custom Bézier curves\n\nDefine a Bézier curve with an `Array` of 4 coordinates:\n\n```javascript\nanime({\n  targets: 'div',\n  translateX: 100,\n  easing: [.91,-0.54,.29,1.56]\n});\n```\n\nCustom Bézier curves coordinates can be generated here <https://matthewlein.com/ceaser/>\n\n➜ [Custom Bézier curves example](http://animejs.com/documentation/#customBezier)\n\n### Defining custom functions\n\nExpand the built in easing functions from `anime.easings`.\n\n```javascript\n// Add custom function\nanime.easings['myCustomEasingName'] = function(t) {\n  return Math.pow(Math.sin(t * 3), 3);\n}\n\n// Usage\nanime({\n  targets: 'div',\n  translateX: 100,\n  easing: 'myCustomEasingName'\n});\n\n// add custom Bézier curve function\nanime.easings['myCustomCurve'] = anime.bezier([.91,-0.54,.29,1.56]);\n\n// Usage\nanime({\n  targets: 'div',\n  translateX: 100,\n  easing: 'myCustomCurve'\n});\n```\n\n➜ [Custom easing functions example](http://animejs.com/documentation/#customEasingFunction)\n\n## Helpers\n\n### anime.speed = x\n\nChange all animations speed (from 0 to 1).\n\n```javascript\nanime.speed = .5; // Slow down all animations by half of their original speed\n```\n\n### anime.running\n\nReturn an `Array` of all active Anime instances.\n\n```javascript\nanime.running;\n```\n\n### anime.remove(target)\n\nRemove one or multiple targets from the animation.\n\n```javascript\nanime.remove('.item-2'); // Remove all elements with the class 'item-2'\n```\n\n### anime.getValue(target, property)\n\nGet current valid value from an element.\n\n```javascript\nanime.getValue('div', 'translateX'); // Return '100px'\n```\n\n### anime.path(pathEl)\n\nCreate a path Function for motion path animation.<br>\nAccepts either a DOM node or CSS selector.\n\n```javascript\nvar path = anime.path('svg path', 'translateX'); // Return path(attribute)\n```\n\n➜ [Motion path example](http://animejs.com/documentation/#motionPath)\n\n### anime.setDashoffset(pathEl)\n\nAn helper for line drawing animation.<br>\nSets the 'stroke-dasharray' to the total path length and return its value.\n\n```javascript\nanime({\n  targets: '.shape path',\n  strokeDashoffset: [anime.pathDashoffset, 0]\n});\n```\n\n➜ [Line drawing example](http://animejs.com/documentation/#lineDrawing)\n\n### anime.easings\n\nReturn the complete list of built in easing functions\n\n```javascript\nanime.easings;\n```\n\n### anime.bezier(x1, x2, y1, y2)\n\nReturn a custom Bézier curve easing function\n\n```javascript\nanime.bezier(x1, x2, y1, y2); // Return function(t)\n```\n\n### anime.timeline()\n\nCreate a timeline to synchronise other Anime instances.\n\n```javascript\nvar timeline = anime.timeline();\ntimeline.add([instance1, instance2, ...]);\n```\n\n➜ [Timeline examples](http://animejs.com/documentation/#basicTimeline)\n\n### anime.random(x, y)\n\nGenerate a random number between two numbers.\n\n```javascript\nanime.random(10, 40); // Will return a random number between 10 and 40\n```\n\n====\n\n[MIT License](LICENSE.md). © 2017 [Julian Garnier](http://juliangarnier.com).\n\nThanks to [Animate Plus](https://github.com/bendc/animateplus) and [Velocity](https://github.com/julianshapiro/velocity) that inspired `anime.js` API, [BezierEasing](https://github.com/gre/bezier-easing) and [jQuery UI](https://jqueryui.com/) for the easing system. [Tim Branyen](https://github.com/tbranyen) For the Promise implementation.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/juliangarnier/anime.git"
  },
  "scripts": {},
  "version": "2.2.0"
}
